import os
import logging
from typing import Dict, Any, Optional, List
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
import json
import re
from dataclasses import dataclass
import traceback

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="JAK Company RAG Robust API", version="2.0")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# V√©rification de la cl√© API OpenAI
openai_key = os.getenv("OPENAI_API_KEY")
if openai_key:
    os.environ["OPENAI_API_KEY"] = openai_key
    logger.info("OpenAI API Key configured")
else:
    logger.warning("OpenAI API Key not found - some features may not work")

# Store pour la m√©moire des conversations (simplifi√©)
memory_store: Dict[str, List] = {}

@dataclass
class SimpleRAGDecision:
    """Structure simplifi√©e pour les d√©cisions RAG"""
    search_query: str
    search_strategy: str
    context_needed: List[str]
    priority_level: str
    should_escalate: bool
    system_instructions: str

class SimpleRAGEngine:
    """Moteur de d√©cision RAG ultra-simplifi√© et robuste"""
    
    @staticmethod
    def analyze_intent(message: str, session_id: str = "default") -> SimpleRAGDecision:
        """Analyse l'intention de mani√®re robuste"""
        
        try:
            logger.info(f"üß† ANALYSE INTENTION: '{message[:50]}...'")
            
            message_lower = message.lower().strip()
            
            # === D√âTECTION PAIEMENT (PRIORIT√â HAUTE) ===
            payment_keywords = [
                "pas √©t√© pay√©", "pas pay√©", "paiement", "cpf", "opco", 
                "virement", "argent", "retard", "d√©lai", "attends",
                "finance", "financement", "pay√© pour", "rien re√ßu"
            ]
            
            if any(keyword in message_lower for keyword in payment_keywords):
                logger.info("üéØ CONTEXTE PAIEMENT D√âTECT√â")
                return SimpleRAGDecision(
                    search_query=f"paiement formation d√©lai {message}",
                    search_strategy="hybrid",
                    context_needed=["paiement", "cpf", "opco", "financement"],
                    priority_level="high",
                    should_escalate=True,
                    system_instructions="""CONTEXTE D√âTECT√â: PAIEMENT FORMATION

Tu dois OBLIGATOIREMENT:
1. Chercher les informations sur les d√©lais de paiement dans Supabase
2. Identifier le type de financement (CPF, OPCO, direct)
3. Appliquer les r√®gles de d√©lais sp√©cifiques
4. Si d√©lai d√©pass√© ‚Üí proposer escalade
5. Reproduire EXACTEMENT les blocs trouv√©s avec tous les emojis

R√àGLES D√âLAIS:
- CPF: 45 jours minimum
- OPCO: 2 mois en moyenne  
- Direct: 7 jours maximum"""
                )
            
            # === D√âTECTION AMBASSADEUR ===
            ambassador_keywords = [
                "ambassadeur", "commission", "affiliation", "partenaire",
                "gagner argent", "contacts", "√©tapes", "devenir",
                "programme", "recommander"
            ]
            
            if any(keyword in message_lower for keyword in ambassador_keywords):
                logger.info("üéØ CONTEXTE AMBASSADEUR D√âTECT√â")
                return SimpleRAGDecision(
                    search_query=f"ambassadeur programme affiliation {message}",
                    search_strategy="semantic",
                    context_needed=["ambassadeur", "commission", "√©tapes", "affiliation"],
                    priority_level="high",
                    should_escalate=False,
                    system_instructions="""CONTEXTE D√âTECT√â: AMBASSADEUR

Tu dois OBLIGATOIREMENT:
1. Chercher les informations sur le programme ambassadeur
2. Si c'est une explication ‚Üí Bloc ambassadeur_explication
3. Si c'est pour devenir ambassadeur ‚Üí Bloc ambassadeur_nouveau (4 √©tapes)
4. Si c'est une demande d'√©tapes ‚Üí Donner les 4 √©tapes compl√®tes
5. Reproduire EXACTEMENT les blocs avec tous les liens et emojis"""
                )
            
            # === D√âTECTION FORMATION ===
            formation_keywords = [
                "formation", "cours", "apprendre", "catalogue", "proposez",
                "disponible", "enseigner", "stage", "bureautique", 
                "informatique", "langues", "anglais", "excel"
            ]
            
            if any(keyword in message_lower for keyword in formation_keywords):
                logger.info("üéØ CONTEXTE FORMATION D√âTECT√â")
                return SimpleRAGDecision(
                    search_query=f"formation catalogue {message}",
                    search_strategy="semantic",
                    context_needed=["formation", "cpf", "catalogue", "professionnel"],
                    priority_level="medium",
                    should_escalate=False,
                    system_instructions="""CONTEXTE D√âTECT√â: FORMATION

Tu dois OBLIGATOIREMENT:
1. Chercher les informations sur les formations disponibles
2. Identifier le profil utilisateur (pro, particulier, entreprise)
3. Proposer les formations adapt√©es
4. Mentionner que le CPF n'est plus disponible
5. Diriger vers les bons financements (OPCO, entreprise)"""
                )
            
            # === CONTEXTE G√âN√âRAL ===
            logger.info("üéØ CONTEXTE G√âN√âRAL")
            return SimpleRAGDecision(
                search_query=message,
                search_strategy="semantic",
                context_needed=["general"],
                priority_level="low",
                should_escalate=False,
                system_instructions="""CONTEXTE G√âN√âRAL

Tu dois:
1. Faire une recherche large dans Supabase
2. Analyser les r√©sultats pour trouver le contexte appropri√©
3. Si aucun r√©sultat pertinent ‚Üí Proposer une escalade
4. Maintenir le ton chaleureux de JAK Company
5. Utiliser les emojis naturellement"""
            )
            
        except Exception as e:
            logger.error(f"Erreur dans analyze_intent: {str(e)}")
            # Retour de secours
            return SimpleRAGDecision(
                search_query=message,
                search_strategy="semantic",
                context_needed=["general"],
                priority_level="low",
                should_escalate=True,
                system_instructions="Cherche dans Supabase et reproduis les blocs trouv√©s exactement."
            )

class MemoryManager:
    """Gestionnaire de m√©moire ultra-simplifi√©"""
    
    @staticmethod
    def add_message(session_id: str, message: str, role: str = "user"):
        """Ajoute un message √† la m√©moire"""
        try:
            if session_id not in memory_store:
                memory_store[session_id] = []
            
            memory_store[session_id].append({
                "role": role,
                "content": message,
                "timestamp": "now"
            })
            
            # Limiter √† 10 messages max
            if len(memory_store[session_id]) > 10:
                memory_store[session_id] = memory_store[session_id][-10:]
                
        except Exception as e:
            logger.error(f"Erreur m√©moire: {str(e)}")
    
    @staticmethod
    def get_context(session_id: str) -> List[Dict]:
        """R√©cup√®re le contexte de conversation"""
        try:
            return memory_store.get(session_id, [])
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration contexte: {str(e)}")
            return []

# ENDPOINTS API

@app.get("/")
async def root():
    """Endpoint racine pour v√©rifier que l'API fonctionne"""
    return {
        "status": "healthy",
        "message": "JAK Company RAG API is running",
        "version": "2.0 Robust"
    }

@app.get("/health")
async def health_check():
    """Endpoint de sant√© d√©taill√©"""
    return {
        "status": "healthy",
        "version": "2.0 Robust",
        "active_sessions": len(memory_store),
        "features": [
            "Simple RAG Decision Engine",
            "Context-Aware Search",
            "Robust Error Handling",
            "Memory Management",
            "Ultra-Stable Processing"
        ]
    }

@app.post("/optimize_rag")
async def optimize_rag_decision(request: Request):
    """Point d'entr√©e principal - VERSION ULTRA ROBUSTE"""
    
    session_id = "default_session"
    user_message = "message par d√©faut"
    
    try:
        # === PARSING S√âCURIS√â ===
        try:
            body = await request.json()
            logger.info(f"Body re√ßu: {body}")
        except Exception as e:
            logger.error(f"Erreur parsing JSON: {str(e)}")
            return {
                "optimized_response": "Erreur de format JSON",
                "search_query": "error",
                "search_strategy": "fallback",
                "context_needed": ["error"],
                "priority_level": "high",
                "system_instructions": "Erreur de parsing",
                "escalade_required": True,
                "response_type": "json_error",
                "session_id": "error_session",
                "rag_confidence": 0
            }

        # === EXTRACTION S√âCURIS√âE DES DONN√âES ===
        try:
            user_message = str(body.get("message", "")).strip()
            session_id = str(body.get("session_id", "default_session"))
            
            if not user_message:
                user_message = "message vide"
                
            logger.info(f"[{session_id}] Message: '{user_message[:50]}...'")
            
        except Exception as e:
            logger.error(f"Erreur extraction donn√©es: {str(e)}")
            user_message = "erreur extraction"
            session_id = "error_session"

        # === GESTION M√âMOIRE S√âCURIS√âE ===
        try:
            MemoryManager.add_message(session_id, user_message, "user")
            conversation_context = MemoryManager.get_context(session_id)
        except Exception as e:
            logger.error(f"Erreur m√©moire: {str(e)}")
            conversation_context = []

        # === ANALYSE D'INTENTION S√âCURIS√âE ===
        try:
            decision = SimpleRAGEngine.analyze_intent(user_message, session_id)
            logger.info(f"[{session_id}] D√âCISION RAG: {decision.search_strategy} - {decision.priority_level}")
        except Exception as e:
            logger.error(f"Erreur analyse intention: {str(e)}")
            # D√©cision de fallback
            decision = SimpleRAGDecision(
                search_query=user_message,
                search_strategy="semantic",
                context_needed=["general"],
                priority_level="low",
                should_escalate=True,
                system_instructions="Erreur d'analyse - cherche dans Supabase"
            )

        # === CONSTRUCTION R√âPONSE S√âCURIS√âE ===
        try:
            response_data = {
                "optimized_response": "R√©ponse optimis√©e g√©n√©r√©e",
                "search_query": decision.search_query,
                "search_strategy": decision.search_strategy,
                "context_needed": decision.context_needed,
                "priority_level": decision.priority_level,
                "system_instructions": decision.system_instructions,
                "escalade_required": decision.should_escalate,
                "response_type": "rag_optimized_robust",
                "session_id": session_id,
                "rag_confidence": 8,  # Confiance √©lev√©e
                "conversation_length": len(conversation_context)
            }
            
            # Ajouter la r√©ponse √† la m√©moire
            MemoryManager.add_message(session_id, "RAG decision made", "assistant")
            
            logger.info(f"[{session_id}] RAG Response g√©n√©r√© avec succ√®s: {decision.search_strategy}")
            
            return response_data
            
        except Exception as e:
            logger.error(f"Erreur construction r√©ponse: {str(e)}")
            return {
                "optimized_response": "Erreur construction r√©ponse",
                "search_query": user_message,
                "search_strategy": "fallback",
                "context_needed": ["error"],
                "priority_level": "high",
                "system_instructions": "Erreur syst√®me - escalade requise",
                "escalade_required": True,
                "response_type": "construction_error",
                "session_id": session_id,
                "rag_confidence": 0
            }

    except Exception as e:
        # === GESTION D'ERREUR GLOBALE ===
        logger.error(f"ERREUR GLOBALE: {str(e)}")
        logger.error(f"Stack trace: {traceback.format_exc()}")
        
        # R√©ponse de fallback ultra-robuste
        return {
            "optimized_response": "Erreur syst√®me d√©tect√©e",
            "search_query": user_message,
            "search_strategy": "fallback",
            "context_needed": ["error"],
            "priority_level": "high", 
            "system_instructions": "Erreur critique - escalade imm√©diate requise",
            "escalade_required": True,
            "response_type": "global_error_fallback",
            "session_id": session_id,
            "rag_confidence": 0,
            "error_details": str(e)[:100]  # Limiter la taille de l'erreur
        }

@app.post("/clear_memory/{session_id}")
async def clear_memory(session_id: str):
    """Efface la m√©moire d'une session"""
    try:
        if session_id in memory_store:
            del memory_store[session_id]
            return {"status": "success", "message": f"Memory cleared for {session_id}"}
        return {"status": "info", "message": f"No memory found for {session_id}"}
    except Exception as e:
        logger.error(f"Erreur clear memory: {str(e)}")
        return {"status": "error", "message": "Erreur lors de l'effacement m√©moire"}

@app.get("/memory_status")
async def memory_status():
    """Statut de la m√©moire"""
    try:
        return {
            "active_sessions": len(memory_store),
            "sessions": list(memory_store.keys()),
            "total_messages": sum(len(messages) for messages in memory_store.values())
        }
    except Exception as e:
        logger.error(f"Erreur memory status: {str(e)}")
        return {"error": "Erreur r√©cup√©ration statut m√©moire"}

if __name__ == "__main__":
    import uvicorn
    try:
        logger.info("üöÄ D√©marrage JAK Company RAG API Robust")
        uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    except Exception as e:
        logger.error(f"Erreur d√©marrage serveur: {str(e)}")
        print(f"ERREUR CRITIQUE: {str(e)}")