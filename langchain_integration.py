from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.llms import OpenAI  # ou votre LLM
from escalation_middleware import EscalationMiddleware

class EscalationAwareChain:
    """
    ChaÃ®ne LangChain qui intÃ¨gre automatiquement l'escalade commerciale.
    """
    
    def __init__(self, llm):
        self.llm = llm
        self.middleware = EscalationMiddleware()
        
        # Template de base pour les rÃ©ponses
        self.base_prompt = PromptTemplate(
            input_variables=["user_message", "context"],
            template="""
            Tu es un assistant commercial de JAK Company, spÃ©cialisÃ© dans les formations.
            
            Contexte: {context}
            Message utilisateur: {user_message}
            
            RÃ©ponds de maniÃ¨re professionnelle et engageante. Si l'utilisateur demande 
            une formation spÃ©cifique, ne rÃ©pÃ¨te pas la liste complÃ¨te des formations.
            """
        )
        
        self.base_chain = LLMChain(llm=self.llm, prompt=self.base_prompt)
    
    def run(self, user_message: str, context: str = "") -> str:
        """
        ExÃ©cute la chaÃ®ne avec gestion automatique de l'escalade.
        """
        # GÃ©nÃ©rer la rÃ©ponse de base
        base_response = self.base_chain.run({
            "user_message": user_message,
            "context": context
        })
        
        # Appliquer le middleware d'escalade
        final_response = self.middleware.process_response(user_message, base_response)
        
        return final_response

# Exemple d'utilisation avec votre conversation
def test_conversation():
    # Simuler un LLM (remplacez par votre vrai LLM)
    llm = OpenAI(temperature=0.7)
    
    chain = EscalationAwareChain(llm)
    
    # Test avec votre exemple
    user_message = "je voudrais faire une formation en anglais pro"
    
    # Simuler une rÃ©ponse de base (dans la vraie vie, ce serait gÃ©nÃ©rÃ© par le LLM)
    base_response = """Parfait ! ğŸ˜Š Les formations en anglais professionnel sont tout Ã  fait possibles chez JAK Company.

Cependant, pour le moment, nous ne faisons plus de formations financÃ©es par le CPF ğŸš«. Nous continuons nÃ©anmoins Ã  accompagner les professionnels, entreprises, auto-entrepreneurs ou salariÃ©s grÃ¢ce Ã  d'autres dispositifs de financement ğŸ’¼."""
    
    # Appliquer le middleware
    middleware = EscalationMiddleware()
    result = middleware.process_response(user_message, base_response)
    
    print("=== Test du middleware ===")
    print(f"Message utilisateur: {user_message}")
    print(f"RÃ©ponse de base: {base_response}")
    print(f"RÃ©ponse finale: {result}")
    print("=" * 50)

if __name__ == "__main__":
    test_conversation()