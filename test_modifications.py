#!/usr/bin/env python3
"""
Script de test pour v√©rifier les modifications apport√©es au syst√®me de gestion des formations et paiements.
"""

import asyncio
import sys
import os

# Ajouter le r√©pertoire courant au path pour importer process
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from process import OptimizedRAGEngine, KEYWORD_SETS

async def test_formation_detection():
    """Test de la d√©tection des questions sur les formations"""
    print("üß™ TEST D√âTECTION FORMATIONS")
    print("=" * 50)
    
    engine = OptimizedRAGEngine()
    
    test_cases = [
        "quelles sont vos formations ?",
        "vous proposez quoi comme formations ?",
        "formations disponibles ?",
        "catalogue formations ?",
        "qu'est-ce que vous proposez comme formations ?"
    ]
    
    for message in test_cases:
        decision = await engine.analyze_intent(message)
        print(f"Message: '{message}'")
        print(f"Type: {decision.search_strategy}")
        print(f"Instructions: {decision.system_instructions[:100]}...")
        print(f"Priorit√©: {decision.priority_level}")
        print("-" * 30)

async def test_direct_financing_detection():
    """Test de la d√©tection des financements directs"""
    print("\nüß™ TEST D√âTECTION FINANCEMENT DIRECT")
    print("=" * 50)
    
    engine = OptimizedRAGEngine()
    
    test_cases = [
        "j'ai pay√© toute seule",
        "j'ai pay√© moi",
        "c'est moi qui est financ√©",
        "financement moi m√™me",
        "financement en direct",
        "paiement direct",
        "j'ai financ√© toute seule",
        "j'ai financ√© moi",
        "c'est moi qui ai pay√©",
        "financement par mes soins",
        "paiement par mes soins",
        "mes propres moyens",
        "avec mes propres fonds",
        "de ma poche",
        "de mes √©conomies",
        "financement individuel",
        "paiement individuel",
        "auto-financement",
        "financement priv√©",
        "paiement priv√©",
        "financement personnel",
        "j'ai tout pay√©",
        "j'ai tout financ√©",
        "c'est moi qui finance",
        "financement direct",
        "paiement en direct",
        "financement cash",
        "paiement cash",
        "financement comptant",
        "paiement comptant"
    ]
    
    for message in test_cases:
        is_direct = engine._detect_direct_financing(message.lower())
        status = "‚úÖ D√âTECT√â" if is_direct else "‚ùå NON D√âTECT√â"
        print(f"{status}: '{message}'")

async def test_payment_detection():
    """Test de la d√©tection des questions de paiement"""
    print("\nüß™ TEST D√âTECTION PAIEMENTS")
    print("=" * 50)
    
    engine = OptimizedRAGEngine()
    
    test_cases = [
        "j'ai pas √©t√© pay√©",
        "je n'ai pas re√ßu mon paiement",
        "pas de virement re√ßu",
        "d√©lai paiement formation",
        "quand vais-je √™tre pay√© ?"
    ]
    
    for message in test_cases:
        decision = await engine.analyze_intent(message)
        print(f"Message: '{message}'")
        print(f"Type: {decision.search_strategy}")
        print(f"Priorit√©: {decision.priority_level}")
        print(f"Escalade: {decision.should_escalate}")
        print("-" * 30)

async def test_keyword_sets():
    """Test des ensembles de mots-cl√©s"""
    print("\nüß™ TEST ENSEMBLES MOTS-CL√âS")
    print("=" * 50)
    
    # Test formation keywords
    formation_test = "quelles formations proposez-vous ?"
    has_formation = any(keyword in formation_test.lower() for keyword in KEYWORD_SETS.formation_keywords)
    print(f"Formation d√©tect√©e: {has_formation}")
    
    # Test payment keywords
    payment_test = "j'ai pay√© toute seule"
    has_payment = any(keyword in payment_test.lower() for keyword in KEYWORD_SETS.payment_keywords)
    print(f"Paiement d√©tect√©: {has_payment}")
    
    # Test direct financing
    engine = OptimizedRAGEngine()
    is_direct = engine._detect_direct_financing(payment_test.lower())
    print(f"Financement direct d√©tect√©: {is_direct}")

async def main():
    """Fonction principale de test"""
    print("üöÄ D√âBUT DES TESTS - MODIFICATIONS FORMATIONS ET PAIEMENTS")
    print("=" * 60)
    
    await test_formation_detection()
    await test_direct_financing_detection()
    await test_payment_detection()
    await test_keyword_sets()
    
    print("\n‚úÖ TOUS LES TESTS TERMIN√âS")
    print("=" * 60)
    print("üìã R√âSUM√â DES MODIFICATIONS:")
    print("1. ‚úÖ BLOC K prioritaire pour les formations")
    print("2. ‚úÖ D√©tection renforc√©e des financements directs")
    print("3. ‚úÖ BLOC J pour paiements directs d√©lai d√©pass√©")
    print("4. ‚úÖ Nouveaux termes de financement direct ajout√©s")

if __name__ == "__main__":
    asyncio.run(main())