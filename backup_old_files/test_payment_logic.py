#!/usr/bin/env python3
"""
Test de la logique de paiement corrig√©e
V√©rifie que les d√©lais sont correctement g√©r√©s
"""

def test_payment_delay_logic():
    """Test de la logique des d√©lais de paiement"""
    print("üß™ TEST LOGIQUE D√âLAIS PAIEMENT")
    print("=" * 50)
    
    test_cases = [
        {
            "scenario": "Financement direct - 4 jours",
            "days": 4,
            "expected": "R√©ponse normale (pas d'escalade)",
            "reason": "4 jours < 7 jours (dans les d√©lais)"
        },
        {
            "scenario": "Financement direct - 7 jours",
            "days": 7,
            "expected": "R√©ponse normale (pas d'escalade)",
            "reason": "7 jours = 7 jours (limite exacte)"
        },
        {
            "scenario": "Financement direct - 8 jours",
            "days": 8,
            "expected": "BLOC J (escalade)",
            "reason": "8 jours > 7 jours (d√©lai d√©pass√©)"
        },
        {
            "scenario": "Financement direct - 10 jours",
            "days": 10,
            "expected": "BLOC J (escalade)",
            "reason": "10 jours > 7 jours (d√©lai d√©pass√©)"
        }
    ]
    
    for test in test_cases:
        days = test["days"]
        expected = test["expected"]
        reason = test["reason"]
        
        # Logique de test
        if days <= 7:
            result = "R√©ponse normale (pas d'escalade)"
            status = "‚úÖ" if result == expected else "‚ùå"
        else:
            result = "BLOC J (escalade)"
            status = "‚úÖ" if result == expected else "‚ùå"
        
        print(f"{status} {test['scenario']}: {result}")
        print(f"   Raison: {reason}")
        print()

def test_direct_financing_detection():
    """Test de la d√©tection du financement direct"""
    print("üß™ TEST D√âTECTION FINANCEMENT DIRECT")
    print("=" * 50)
    
    direct_financing_terms = [
        "pay√© tout seul",
        "financ√© en direct", 
        "j'ai pay√©",
        "paiement direct",
        "financement direct",
        "j'ai financ√©",
        "pay√© par moi",
        "financ√© par moi",
        "sans organisme",
        "financement personnel",
        "paiement personnel",
        "auto-financ√©",
        "autofinanc√©",
        "mes fonds",
        "par mes soins",
        "j'ai pay√© toute seule",
        "j'ai pay√© moi",
        "c'est moi qui est financ√©",
        "financement moi m√™me",
        "financement en direct",
        "j'ai financ√© toute seule",
        "j'ai financ√© moi",
        "c'est moi qui ai pay√©",
        "financement par mes soins",
        "paiement par mes soins",
        "mes propres moyens",
        "avec mes propres fonds",
        "de ma poche",
        "de mes √©conomies",
        "financement individuel",
        "paiement individuel",
        "auto-financement",
        "financement priv√©",
        "paiement priv√©",
        "financement personnel",
        "j'ai tout pay√©",
        "j'ai tout financ√©",
        "c'est moi qui finance",
        "financement direct",
        "paiement en direct",
        "financement cash",
        "paiement cash",
        "financement comptant",
        "paiement comptant"
    ]
    
    test_messages = [
        "j'ai pas √©t√© pay√© et j'ai pay√© tout seul",
        "j'ai pas √©t√© pay√© et financ√© en direct",
        "j'ai pas √©t√© pay√© et j'ai pay√© par moi",
        "j'ai pas √©t√© pay√© et c'est moi qui est financ√©",
        "j'ai pas √©t√© pay√© et financement direct",
        "j'ai pas √©t√© pay√© et j'ai pay√© de ma poche",
        "j'ai pas √©t√© pay√© et auto-financ√©",
        "j'ai pas √©t√© pay√© et financement personnel"
    ]
    
    def detect_direct_financing(message_lower):
        """Fonction de d√©tection du financement direct"""
        return any(term in message_lower for term in direct_financing_terms)
    
    for message in test_messages:
        is_direct = detect_direct_financing(message.lower())
        status = "‚úÖ D√âTECT√â" if is_direct else "‚ùå NON D√âTECT√â"
        print(f"{status}: '{message}'")
    
    print(f"\nüìä Total termes de financement direct: {len(direct_financing_terms)}")
    detected_count = sum(1 for msg in test_messages if detect_direct_financing(msg.lower()))
    print(f"‚úÖ Messages d√©tect√©s: {detected_count}/{len(test_messages)}")

def test_complete_scenarios():
    """Test des sc√©narios complets"""
    print("\nüß™ TEST SC√âNARIOS COMPLETS")
    print("=" * 50)
    
    scenarios = [
        {
            "user_message": "j'ai pas √©t√© pay√©",
            "response": "Comment la formation a-t-elle √©t√© financ√©e ? (CPF, OPCO, paiement direct)\nEt environ quand elle s'est termin√©e ?",
            "user_answer": "en direct et termin√©e il y a 4 jours",
            "expected_final": "R√©ponse normale: On est encore dans les d√©lais (7 jours max)",
            "should_escalate": False
        },
        {
            "user_message": "j'ai pas √©t√© pay√©", 
            "response": "Comment la formation a-t-elle √©t√© financ√©e ? (CPF, OPCO, paiement direct)\nEt environ quand elle s'est termin√©e ?",
            "user_answer": "paiement en direct il y a 8 jours",
            "expected_final": "BLOC J: ‚è∞ Paiement direct : d√©lai d√©pass√© ‚è∞",
            "should_escalate": True
        },
        {
            "user_message": "j'ai pas √©t√© pay√© et j'ai pay√© tout seul",
            "response": "Environ quand la formation s'est-elle termin√©e ?",
            "user_answer": "termin√©e il y a 4 jours",
            "expected_final": "R√©ponse normale: On est encore dans les d√©lais (7 jours max)",
            "should_escalate": False
        },
        {
            "user_message": "j'ai pas √©t√© pay√© et financ√© en direct",
            "response": "Environ quand la formation s'est-elle termin√©e ?", 
            "user_answer": "termin√©e il y a 10 jours",
            "expected_final": "BLOC J: ‚è∞ Paiement direct : d√©lai d√©pass√© ‚è∞",
            "should_escalate": True
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"üìã Sc√©nario {i}:")
        print(f"   Message: {scenario['user_message']}")
        print(f"   R√©ponse attendue: {scenario['response']}")
        print(f"   R√©ponse utilisateur: {scenario['user_answer']}")
        print(f"   R√©sultat final: {scenario['expected_final']}")
        print(f"   Escalade: {'‚úÖ OUI' if scenario['should_escalate'] else '‚ùå NON'}")
        print()

def main():
    """Fonction principale de test"""
    print("üöÄ D√âBUT DES TESTS - LOGIQUE PAIEMENT CORRIG√âE")
    print("=" * 60)
    
    test_payment_delay_logic()
    test_direct_financing_detection()
    test_complete_scenarios()
    
    print("‚úÖ TOUS LES TESTS TERMIN√âS")
    print("=" * 60)
    print("üìã R√âSUM√â DES CORRECTIONS:")
    print("1. ‚úÖ should_escalate=False pour les paiements (logique dans les instructions)")
    print("2. ‚úÖ Logique d√©lais corrig√©e: ‚â§7j normal, >7j BLOC J")
    print("3. ‚úÖ Documentation corrig√©e (4 jours < 7 jours)")
    print("4. ‚úÖ Instructions syst√®me clarifi√©es")
    print("\nüéØ COMPORTEMENT ATTENDU:")
    print("- Financement direct + ‚â§7 jours ‚Üí R√©ponse normale (pas d'escalade)")
    print("- Financement direct + >7 jours ‚Üí BLOC J (escalade)")
    print("- D√©tection automatique du financement direct")
    print("- Questions adaptatives selon le type de financement")

if __name__ == "__main__":
    main()