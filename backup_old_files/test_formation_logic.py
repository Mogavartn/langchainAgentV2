#!/usr/bin/env python3
"""
Script de test pour v√©rifier la logique des formations
Teste le sc√©nario complet : BLOC K ‚Üí BLOC M ‚Üí BLOC 6.2
"""

import asyncio
import aiohttp
import json

async def test_formation_logic():
    """Teste la logique compl√®te des formations"""
    
    # URL de l'API
    base_url = "http://localhost:8000"
    
    # Messages de test selon le sc√©nario
    test_messages = [
        "quelles sont vos formations ?",  # Devrait d√©clencher BLOC K
        "l'anglais m'int√©rresse",        # Devrait d√©clencher BLOC M
        "je veux bien √™tre mis en contact oui",  # Devrait d√©clencher BLOC 6.2
        "ok"  # Devrait d√©clencher BLOC 6.2 (confirmation)
    ]
    
    print("üß™ TEST DE LA LOGIQUE DES FORMATIONS")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        # Test 1: V√©rifier que l'API fonctionne
        print("\n1Ô∏è‚É£ Test de connectivit√©...")
        try:
            async with session.get(f"{base_url}/health") as response:
                if response.status == 200:
                    print("‚úÖ API accessible")
                else:
                    print("‚ùå API non accessible")
                    return
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return
        
        # Test 2: Tester la logique des formations
        print("\n2Ô∏è‚É£ Test de la logique des formations...")
        
        test_data = {
            "messages": test_messages,
            "session_id": "test_formation_session"
        }
        
        try:
            async with session.post(f"{base_url}/test_formation_logic", json=test_data) as response:
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ Test de logique ex√©cut√© avec succ√®s")
                    
                    # Analyser les r√©sultats
                    print("\nüìä R√âSULTATS DU TEST:")
                    print("-" * 30)
                    
                    for i, test_result in enumerate(result["test_results"]):
                        print(f"\nMessage {i+1}: '{test_result['message']}'")
                        print(f"  ‚Üí Type de d√©cision: {test_result['decision_type']}")
                        print(f"  ‚Üí BLOC K pr√©sent√©: {test_result['bloc_k_presented']}")
                        print(f"  ‚Üí BLOC M pr√©sent√©: {test_result['bloc_m_presented']}")
                        print(f"  ‚Üí Escalade requise: {test_result['should_escalate']}")
                    
                    print(f"\nüéØ √âTAT FINAL:")
                    print(f"  ‚Üí BLOC K pr√©sent√©: {result['final_state']['bloc_k_presented']}")
                    print(f"  ‚Üí BLOC M pr√©sent√©: {result['final_state']['bloc_m_presented']}")
                    
                    # V√©rifier que la logique est correcte
                    print("\nüîç V√âRIFICATION DE LA LOGIQUE:")
                    
                    # Message 1: Devrait pr√©senter BLOC K
                    if "FORMATION" in result["test_results"][0]["decision_type"]:
                        print("‚úÖ Message 1: BLOC K correctement d√©tect√©")
                    else:
                        print("‚ùå Message 1: BLOC K non d√©tect√©")
                    
                    # Message 2: Devrait pr√©senter BLOC M
                    if "ESCALADE FORMATION" in result["test_results"][1]["decision_type"]:
                        print("‚úÖ Message 2: BLOC M correctement d√©tect√©")
                    else:
                        print("‚ùå Message 2: BLOC M non d√©tect√©")
                    
                    # Message 3: Devrait pr√©senter BLOC 6.2
                    if "CONFIRMATION ESCALADE" in result["test_results"][2]["decision_type"]:
                        print("‚úÖ Message 3: BLOC 6.2 correctement d√©tect√©")
                    else:
                        print("‚ùå Message 3: BLOC 6.2 non d√©tect√©")
                    
                    # Message 4: Devrait pr√©senter BLOC 6.2
                    if "CONFIRMATION ESCALADE" in result["test_results"][3]["decision_type"]:
                        print("‚úÖ Message 4: BLOC 6.2 correctement d√©tect√©")
                    else:
                        print("‚ùå Message 4: BLOC 6.2 non d√©tect√©")
                    
                    # V√©rifier l'√©tat final
                    if result['final_state']['bloc_k_presented'] and result['final_state']['bloc_m_presented']:
                        print("‚úÖ √âtat final: Tous les blocs correctement enregistr√©s")
                    else:
                        print("‚ùå √âtat final: Blocs manquants")
                    
                else:
                    print(f"‚ùå Erreur lors du test: {response.status}")
                    error_text = await response.text()
                    print(f"Erreur: {error_text}")
                    
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
        
        # Test 3: Test individuel de chaque message
        print("\n3Ô∏è‚É£ Test individuel des messages...")
        
        session_id = "test_individual_session"
        
        for i, message in enumerate(test_messages):
            print(f"\n--- Test message {i+1}: '{message}' ---")
            
            try:
                test_data = {
                    "message": message,
                    "session_id": session_id
                }
                
                async with session.post(f"{base_url}/optimize_rag", json=test_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        decision_type = result.get("system_instructions", "")
                        if "FORMATION (BLOC K)" in decision_type:
                            print(f"‚úÖ BLOC K d√©tect√©")
                        elif "ESCALADE FORMATION (BLOC M)" in decision_type:
                            print(f"‚úÖ BLOC M d√©tect√©")
                        elif "CONFIRMATION ESCALADE FORMATION (BLOC 6.2)" in decision_type:
                            print(f"‚úÖ BLOC 6.2 d√©tect√©")
                        else:
                            print(f"‚ùì Autre type: {decision_type[:50]}...")
                        
                        print(f"   Escalade: {result.get('escalade_required', False)}")
                        
                    else:
                        print(f"‚ùå Erreur: {response.status}")
                        
            except Exception as e:
                print(f"‚ùå Erreur: {e}")

async def test_specific_scenarios():
    """Teste des sc√©narios sp√©cifiques"""
    
    print("\nüéØ TESTS DE SC√âNARIOS SP√âCIFIQUES")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    
    # Sc√©nario 1: Demande de formation pour la premi√®re fois
    print("\nüìö Sc√©nario 1: Premi√®re demande de formation")
    
    async with aiohttp.ClientSession() as session:
        test_data = {
            "message": "quelles sont vos formations ?",
            "session_id": "scenario1"
        }
        
        try:
            async with session.post(f"{base_url}/optimize_rag", json=test_data) as response:
                if response.status == 200:
                    result = await response.json()
                    if "FORMATION (BLOC K)" in result.get("system_instructions", ""):
                        print("‚úÖ BLOC K correctement d√©tect√© pour premi√®re demande")
                    else:
                        print("‚ùå BLOC K non d√©tect√©")
                else:
                    print(f"‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        # Sc√©nario 2: Int√©r√™t apr√®s pr√©sentation des formations
        print("\nüéØ Sc√©nario 2: Int√©r√™t apr√®s pr√©sentation")
        
        # D'abord pr√©senter les formations
        test_data = {
            "message": "quelles sont vos formations ?",
            "session_id": "scenario2"
        }
        
        try:
            async with session.post(f"{base_url}/optimize_rag", json=test_data) as response:
                pass  # On ignore la r√©ponse, on veut juste que le BLOC K soit enregistr√©
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        # Ensuite tester l'int√©r√™t
        test_data = {
            "message": "l'anglais m'int√©rresse",
            "session_id": "scenario2"
        }
        
        try:
            async with session.post(f"{base_url}/optimize_rag", json=test_data) as response:
                if response.status == 200:
                    result = await response.json()
                    if "ESCALADE FORMATION (BLOC M)" in result.get("system_instructions", ""):
                        print("‚úÖ BLOC M correctement d√©tect√© apr√®s int√©r√™t")
                    else:
                        print("‚ùå BLOC M non d√©tect√©")
                else:
                    print(f"‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        # Sc√©nario 3: Confirmation apr√®s BLOC M
        print("\n‚úÖ Sc√©nario 3: Confirmation apr√®s BLOC M")
        
        # D'abord pr√©senter les formations et l'int√©r√™t
        for message in ["quelles sont vos formations ?", "l'anglais m'int√©rresse"]:
            test_data = {
                "message": message,
                "session_id": "scenario3"
            }
            try:
                async with session.post(f"{base_url}/optimize_rag", json=test_data) as response:
                    pass
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
        
        # Ensuite tester la confirmation
        test_data = {
            "message": "je veux bien √™tre mis en contact oui",
            "session_id": "scenario3"
        }
        
        try:
            async with session.post(f"{base_url}/optimize_rag", json=test_data) as response:
                if response.status == 200:
                    result = await response.json()
                    if "CONFIRMATION ESCALADE FORMATION (BLOC 6.2)" in result.get("system_instructions", ""):
                        print("‚úÖ BLOC 6.2 correctement d√©tect√© pour confirmation")
                    else:
                        print("‚ùå BLOC 6.2 non d√©tect√©")
                else:
                    print(f"‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de la logique des formations")
    
    # Ex√©cuter les tests
    asyncio.run(test_formation_logic())
    asyncio.run(test_specific_scenarios())
    
    print("\nüéâ Tests termin√©s !")